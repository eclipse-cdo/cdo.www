<wiki:toc />

= Release Notes CDO 3.0 =

This document elaborates on the '''new and noteworthy''' enhancements in CDO 3.0.<br>
Alternatively you can query Bugzilla directly to list
* [https://bugs.eclipse.org/bugs/buglist.cgi?field0-0-0=flagtypes.name;bug_severity=enhancement;resolution=FIXED;classification=Modeling;query_based_on=NEEDS_DOC;query_format=advanced;bug_status=RESOLVED;version=3.0;type0-0-0=notequals;value0-0-0=documentation%2B;component=CDO;component=Net4j;product=EMF;known_name=NEEDS_DOC Enhancements not described in this document]
* [https://bugs.eclipse.org/bugs/buglist.cgi?bug_severity=enhancement;resolution=FIXED;classification=Modeling;query_based_on=NEEDS_DOC;query_format=advanced;bug_status=RESOLVED;version=3.0;component=CDO;component=Net4j;product=EMF;known_name=NEEDS_DOC All enhancements]
* [https://bugs.eclipse.org/bugs/buglist.cgi?bug_severity=blocker;bug_severity=critical;bug_severity=major;bug_severity=normal;bug_severity=minor;bug_severity=trivial;resolution=FIXED;classification=Modeling;query_based_on=NEEDS_DOC;query_format=advanced;bug_status=RESOLVED;version=3.0;component=CDO;component=Net4j;product=EMF;known_name=NEEDS_DOC All bugs]

== User Interface ==

== Core Framework ==

=== Legacy models are now supported ===

Legacy models from a CDO perspective are those that have not been regenerated to support all CDO features natively.
These models are now supported by CDO, although they do not support lazy loading and unloading of their instances.
The legacy mode has to be enabled explicitely for new transactions/views:

    // Enable legacy support from now on for all views that will be opened by this thread
    CDOUtil.setLegacyModeDefault(true);

    CDOView view = session.openView();
    System.out.println("Legacy model support: " + view.isLegacyModeEnabled());

See bugzilla [https://bugs.eclipse.org/bugs/show_bug.cgi?id=247226 247226].

=== The transient modifier of an EStructuralFeature can now be overridden by annotation ===

Sometimes you want to use transient/persistent modifiers for particular structural features in
CDO repositories that differ from the normal (XML) behaviour. The following annotation constants have
been added to EMFUtil:

  public static final String CDO_ANNOTATION_SOURCE = "http://www.eclipse.org/emf/CDO";
  public static final String CDO_ANNOTATION_KEY_PERSISTENT = "persistent";

Their literals can be used in an Ecore model definition as follows:

  <eClassifiers xsi:type="ecore:EClass" name="Product1">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="description" eType="..." transient="true">
      <eAnnotations source="http://www.eclipse.org/emf/CDO">
        <details key="persistent" value="true"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>

See bugzilla [https://bugs.eclipse.org/bugs/show_bug.cgi?id=290990 290990].

=== The session API to determine or wait for remote updates ===

A getLastUpdateTime() method has been added to CDOSession. With the new waitForUpdate() methods
in CDOSession you can, e.g., synchronize local views and transactions.

    final CDOCommitInfo commitInfo = transaction.commit();

    new Thread()
    {
      @Override
      public void run()
      {
        session.waitForUpdate(commitInfo.getTimeStamp());
      }
    }.start();

See bugzilla [https://bugs.eclipse.org/bugs/show_bug.cgi?id=283947 283947].

=== New session option for receiving more detailed commit infos ===

A session can now be configured to receive full revision deltas instead of just invalidation keys.

    session.options().setPassiveUpdateMode(PassiveUpdateMode.CHANGES);
    session.addListener(new IListener()
    {
      public void notifyEvent(IEvent event)
      {
        if (event instanceof CDOSessionInvalidationEvent)
        {
          CDOSessionInvalidationEvent e = (CDOSessionInvalidationEvent)event;
          for (CDORevisionKey key : e.getChangedObjects())
          {
            CDORevisionDelta revisionDelta = (CDORevisionDelta)key;
            System.out.println("Feature deltas: " + revisionDelta.getFeatureDeltas());
          }
        }
      }
    });

A session can now be configured to receive full new revisions instead of only keys.

    session.options().setPassiveUpdateMode(PassiveUpdateMode.ADDITIONS);
    session.addListener(new IListener()
    {
      public void notifyEvent(IEvent event)
      {
        if (event instanceof CDOSessionInvalidationEvent)
        {
          CDOSessionInvalidationEvent e = (CDOSessionInvalidationEvent)event;
          for (CDOIDAndVersion key : e.getNewObjects())
          {
            CDORevision revision = (CDORevision)key;
            System.out.println("Container of new object: " + revision.data().getContainerID());
          }
        }
      }
    });

PassiveUpdateMode.ADDITIONS includes PassiveUpdateMode.CHANGES. The default option is PassiveUpdateMode.INVALIDATIONS. Note that the CDOSessionInvalidationEvent interface extends CDOCommitInfo.

See bugzilla [https://bugs.eclipse.org/bugs/show_bug.cgi?id=294528 294528].

=== Reattached objects now keep their original identity ===

Formerly objects that were first being detached from a transaction and then
being reattached to the same transaction were assigned a new identitiy.
That was annoying in use cases like drag and drop in a user interface.
Now the transaction remembers identities of detached objects and reassigns them if needed.

See bugzilla [https://bugs.eclipse.org/bugs/show_bug.cgi?id=294528 294528].

=== Push transactions have been introduced ===

The new push transactions support commits to local files. Later the changes can be read from this local file and pushed to a repository.

    File file = new File("changes.bin");
    file.delete();

    // Open a new transaction and wrap it in a push transaction
    CDOPushTransaction transaction1 = new CDOPushTransaction(session.openTransaction(), file);

    // Commit to local file
    transaction1.commit();
    transaction1.close();

    // Open a new push transaction and load changes from local file
    CDOPushTransaction transaction2 = new CDOPushTransaction(session.openTransaction(), file);

    // Push changes to the repository
    transaction2.push();
    transaction2.close();

See bugzilla [https://bugs.eclipse.org/bugs/show_bug.cgi?id=297967 297967].

=== Changes in a local transaction can be exported and imported ===

The method exportChanges() has been added to CDOTransaction.

    OutputStream fos = new FileOutputStream("changes.bin");

    try
    {
      CDOSavepoint[] savepoints = transaction1.exportChanges(fos);
    }
    finally
    {
      IOUtil.close(fos);
    }

The method importChanges() has been added to CDOTransaction.

    InputStream fis = new FileInputStream("changes.bin");

    try
    {
      CDOSavepoint[] savepoints = transaction2.importChanges(fis, true);
    }
    finally
    {
      IOUtil.close(fis);
    }

See bugzilla [https://bugs.eclipse.org/bugs/show_bug.cgi?id=298334 298334].

=== Successful commits can now be queried ===

The concept of ''successful commits'' has been made explicit and queriable through CDOCommitInfoManager.

    CDOBranchManager branchManager = session.getBranchManager();
    CDOBranch mainBranch = branchManager.getMainBranch();

    CDOCommitInfoManager commitInfoManager = session.getCommitInfoManager();
    commitInfoManager.getCommitInfos(
        mainBranch,
        CDOBranchPoint.UNSPECIFIED_DATE,
        CDOBranchPoint.UNSPECIFIED_DATE,
        new CDOCommitInfoHandler()
        {
          public void handleCommitInfo(CDOCommitInfo commitInfo)
          {
            System.out.println("Commit comment: " + commitInfo.getComment());
          }
        });

See bugzilla [https://bugs.eclipse.org/bugs/show_bug.cgi?id=256649 256649].

=== Better type support for queries ===

Several small enhancements have been applied to query and query result transport:

* Query parameters can carry enum values instead of integer numbers, see bugzilla [https://bugs.eclipse.org/bugs/show_bug.cgi?id=282610 282610].
* Query results carry enum values instead of integer numbers, see bugzilla [https://bugs.eclipse.org/bugs/show_bug.cgi?id=283117 283117].
* Query results can carry arrays of primitive types, see bugzilla [https://bugs.eclipse.org/bugs/show_bug.cgi?id=282612 282612].

=== New call-back hook after object state changes ===

Provides a way of being notified about state changes of objects.

    CDOView view = session.openView();
    view.addObjectHandler(new CDOObjectHandler()
    {
      public void objectStateChanged(CDOView view, CDOObject object, CDOState oldState, CDOState newState)
      {
        System.out.println("Object transitioned to " + newState);
      }
    });

See bugzilla [https://bugs.eclipse.org/bugs/show_bug.cgi?id=292733 292733].

=== New call-back hook after branch point changes of a view ===

Provides a way of being notified about target changes of views.

    view.addListener(new IListener()
    {
      public void notifyEvent(IEvent event)
      {
        if (event instanceof CDOViewTargetChangedEvent)
        {
          CDOViewTargetChangedEvent e = (CDOViewTargetChangedEvent)event;
          System.out.println("A new view target has been set: " + e.getBranchPoint());
        }
      }
    });

    view.setBranch(view.getSession().getBranchManager().getMainBranch());
    view.setTimeStamp(CDOBranchPoint.UNSPECIFIED_DATE);
    view.setBranchPoint(anotherView);


See bugzilla [https://bugs.eclipse.org/bugs/show_bug.cgi?id=289880 289880].

=== New call-back hook after adapter notification ===

Since adapter notification can cause side effects and the order of the
notifications is unpredictable a new event is emitted by views to indicate the end of a
notification series.

    view.addListener(new IListener()
    {
      public void notifyEvent(IEvent event)
      {
        if (event instanceof CDOViewAdaptersNotifiedEvent)
        {
          CDOViewAdaptersNotifiedEvent e = (CDOViewAdaptersNotifiedEvent)event;
          System.out.println("All adapters have been notified about commit " + e.getTimeStamp());
        }
      }
    });

See bugzilla [https://bugs.eclipse.org/bugs/show_bug.cgi?id=289880 289880].

=== New call-back hook after successful commits ===

Provides a way to handle transactions after they have been committed to the backend store.

    IRepository repository = CDOServerUtil.createRepository("myrepo", store, props);
    repository.addHandler(new IRepository.WriteAccessHandler()
    {
      public void handleTransactionBeforeCommitting(ITransaction transaction,
          IStoreAccessor.CommitContext commitContext, OMMonitor monitor) throws RuntimeException
      {
        System.out.println("About to commit " + transaction);
      }

      public void handleTransactionAfterCommitted(ITransaction transaction,
          IStoreAccessor.CommitContext commitContext, OMMonitor monitor)
      {
        System.out.println("Committed " + transaction);
      }
    });

See bugzilla [https://bugs.eclipse.org/bugs/show_bug.cgi?id=304959 304959].

=== New API to distinguish local commits from remote commits ===

An isRemote() method has been added to CDOSessionInvalidationEvent.

    session.addListener(new IListener()
    {
      public void notifyEvent(IEvent event)
      {
        if (event instanceof CDOSessionInvalidationEvent)
        {
          CDOSessionInvalidationEvent e = (CDOSessionInvalidationEvent)event;
          if (e.isRemote())
          {
            System.out.println("A remote session has committed a transaction: " + e.getUserID());
          }
        }
      }
    });

See bugzilla [https://bugs.eclipse.org/bugs/show_bug.cgi?id=281566 281566].

== DB Store ==

=== New model annotations are available to override mapping defaults ===

The following new annotations are now recognized by the DBStore:

    public enum DBAnnotation
    {
      TABLE_MAPPING("tableMapping"),
      TABLE_NAME("tableName"),
      COLUMN_NAME("columnName"),
      COLUMN_TYPE("columnType"),
      COLUMN_LENGTH("columnLength");

      public final static String SOURCE_URI = "http://www.eclipse.org/CDO/DBStore";
    }

In CDO a structural feature can have multiple annotation with the same source, like:

    <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/CDO/DBStore">
        <details key="columnName" value="HOLY"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/CDO/DBStore">
        <details key="columnType" value="CLOB"/>
      </eAnnotations>
    </eStructuralFeatures>

See bugzillas [https://bugs.eclipse.org/bugs/show_bug.cgi?id=284701 284701], [https://bugs.eclipse.org/bugs/show_bug.cgi?id=282976 282976], [https://bugs.eclipse.org/bugs/show_bug.cgi?id=284680 284680].

=== External references are now supported ===

External references are created if an object managed by a transaction refers to an object
that is either not managed by a view or is managed by a view to a different repository.
Internally such references are represented by instances of CDOIDExternal and their
CDOID.isExternal() method always returns true. In the database they appear as negative long values,
indicating that the URI of the target object can be looked up in a separate table.

See bugzilla [https://bugs.eclipse.org/bugs/show_bug.cgi?id=249610 249610].

=== Feature maps are now supported ===

If your model contains feature maps you can now use the DBStore to persist them.

See bugzilla [https://bugs.eclipse.org/bugs/show_bug.cgi?id=254455 254455].

=== SQL is now supported as a query language ===

If you are aware of the structure and meaning of a DBStore created mapping schema you can now
use SQL to query the backend efficiently. Note that might need to consider version and/or branch information to prevent duplicate results from being returned.

    CDOQuery query = view.createQuery("sql", "SELECT CDO_ID FROM CUSTOMER ORDER BY NAME");
    List<Customer> customers = query.getResult(Customer.class);

See bugzilla [https://bugs.eclipse.org/bugs/show_bug.cgi?id=248933 248933].

